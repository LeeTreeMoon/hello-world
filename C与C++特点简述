C与C++特点简述
美国卡内基·梅隆大学的周以真教授在2006年系统地提出了计算思维的概念：计算思维指的是运用计算机科学的基础概念进行问题求解、系统设计以及人类行为理解等一系
列思维活动。其后，陈国良院士和李廉教授归纳出三种典型的科学思维，即以观察和归纳为特征的实证思维，以推理和演绎为特征的逻辑思维，以抽象和自动化为特征的计
算思维。计算思维是计算机类课程的主要思维方式。如采用李廉教授的观点，即计算思维的本质是抽象和自动化。抽象指的是使用符号系统对问题进行精确而严格的描述；
自动化指的是对这些符号系统施加一定操作并按照某种结构自动地执行。
一、C 语言程序中的计算思维本质之一：抽象
对于 C 语言程序来说，抽象指的是使用符号系统对求解问题进行精确而严格的描述，抽象的过程就是对实际系统建模的过程。实际上，程序是用来描述现实生活中某个实
际存在的或不存在的系统。程序就是对系统的抽象。系统之所以存在，是因为系统具有一些关键特征和核心功能。程序中对系统特征进行抽象的就是操作对象，对系统功能
进行抽象的就是函数。系统功能往往有多个且存在着复杂的调用关系。例如，求一个函数定积分的功能必然涉及求函数在某一个点的取值功能，如果该函数比较复杂且含有
正弦、余弦和正切等三角函数，还需要继续调用求这些三角函数值的功能，形成多级调用；有时函数执行过程中还需要调用本身，形成递归调用。
C 语言程序中的操作对象分为变量和常量。常量是对系统中的取值不变的特征进行抽象，如圆的圆周率；而变量是对系统中取值可以改变的特征进行抽象，如圆的半径。不
管是哪类特征，都会有一个取值范围以及所允许的操作。例如，对于课程成绩，其取值范围一般是从 0～100，而允许对该特征进行的操作可以是加法和减法等算术操作以
及大于和小于等比较运算；而对于课程名字这一特征，就不能进行加法和减法这样的算术操作。C 语言程序中用来对特征的取值范围及允许的操作进行抽象的概念是数据类
型。 
现实生活中，经常需要描述多个相同数据类型的一个系统特征，如所有同学的高等数学课程的成绩，可以使用一维数组来进行描述；而描述多个不同数据类型的多个系统特
征，如学生的姓名、学生的身高和学生的年龄等，可以使用结构体来进行描述；如果要描述多个相同数据类型的多个系统特征，如全班所有同学的高等数学和大学英语课程
的成绩，则可以使用二维数组来进行描述。
二、C 语言程序中的计算思维本质之二：自动化
计算思维的另一个本质是自动化。自动化指的是对符号系统建模的各种元素施加一些操作，并按照某种顺序的或非顺序的结构自动地执行。对于 C 语言程序来说，自动化
体现为函数内部的语句在EIP寄存器加法操作支持下顺序自动地执行以及函数之间的调用在内存堆栈区支持下自动地进行跳转。EIP是32位机的指令指针寄存器，器中增加值
的大小需要根据实际存储指令的大小来确定。
对于 C 语言程序来说，自动化过程中执行的对象是语句。不同类型的语句，执行的结果和效用是不一样的。例如，一个变量定义语句“int a”的执行结果是在内存中分配4
个字节的空间，一个返回语句“return t”的执行结果是将程序的执行流程返回到主调函数中。这些语句的组合构成一个个函数，程序的执行就是在某个函数之中顺序自动
地执行以及在多个函数之间来回自动地跳转。既然程序的执行过程是在某个函数之中顺序自动地执行以及在多个函数之间来回自动地跳转，这种自动执行需要有相应的计算
机软件和硬件基础。支持程序自动执行的软件基础是操作系统，支持程序自动执行的硬件基础是计算机硬件结构，即冯·诺依曼原理的程序存储思想。当用户点击执行按钮后
，程序被提交给操作系统来执行，可以不需要人为干预。此后，程序在操作系统中以进程的方式出现。操作系统协调内存、中央处理器和外存等硬件资源执行该进程。
函数中的语句之所以能够一个接着一个顺序地执行，主要依赖于EIP寄存器的加法操作。当一条指令执行完成之后，EIP寄存器在原有内容的基础上再加上当前指令所占存储
空间大小，其内容便是下一条指令的地址。如此进行下去，就可以一个一个顺序地执行函数中的语句。程序控制之所以能够在函数之间进行跳转，主要依赖于操作系统管理
的内存堆栈区。内存堆栈区是满足“后进先出”操作约束的存储区。当操作系统开始执行用户提交的C语言程序时，首先开始从main函数执行，main函数的相关局部变量被压
入栈中；当执行到被调函数时，被调函数的相关局部变量再次被压入栈中，程序控制转移到被调函数，且操作只能对当前栈顶进行，而此时栈顶存储的就是被调函数的相关
局部变量；当main函数执行结束时，main函数的局部变量从栈中退出，整个程序执行结束。
自动化过程实际反映了 C 语言程序解决实际问题的算法流程。算法是解决某一问题的执行步骤。一般而言，使用 C 语言进行编程之前，需要进行相应的算法设计，即构思
解决实际问题的思路和步骤。一旦这些步骤变成 C 语言程序语句并形成一个完整的程序，就可以提交给操作系统自动地执行这些步骤，这正是计算机解决问题的高效率的体
现。
从以上描述中我可以看出函数在C语言的应用中占有极为重要的地位。而每一个小函数会解决一定的小问题，将小问题一个一个地积累起来，最终就得到一个大问题的解决。
这就好像搭积木，每一个函数就是一块积木，将这些小积木按一定的规律重叠在一起，就可以建成高楼大厦。所以说C语言是一种结构式语言。结构式语言的显著特点是代码
及数据的分隔化，即程序的各个部分除了必要的信息交流外彼此独立。这种结构化方式可使程序层次清晰，便于使用、维护以及调试。C语言是以函数形式提供给用户的，这
些函数可方便的调用，并具有多种循环、条件语句控制程序流向，从而使程序完全结构化。另外，这也为我们在编写C语言代码提供了一种思路，将所遇到的现实问题分解为
一个个小模块，再将小模块转化为程序有规律地联系在一起，让我们的思维更加层次清晰，便于模块式函数的重复应用，简化问题。
接下来，我们再来分析C++这一编程语言的特点。C++是在C语言的基础上发展起来的，区别于C语言的最大特点就是C++是一种面向对象的语言。
面向对象的方法和技术来源于面向对象语言，和传统的软件开发方法相比，具有自然性、简单性、高效性和费用低等多方面的特点，因此成为目前软件开发的主流方法。
面向对象方法包括面向对象分析、面向对象设计、面向对象编程和面向对象测试。 面向对象编程也称面向对象程序设计，是将对象的数据及对数据的操作封装在一起，成为
一个不可分割的整体，同时将具有相同特征的对象抽象为一种新的数据类型—类，通过对象间的消息传递使对象状态发生变化，最终完成计算的一种新颖的程序设计方法。
这种方法符合人们的思维方式和表达方式，实现了从问题域到计算机域的直接映射，使程序设计从过分专业化的方法、规则和技巧中回到客观世界，回到人们通常的思维方
式。
面向对象程序设计和传统的面向过程的结构化程序设计方法相比，能更好地适应在重用性、可扩展性、复杂性、可靠性和规模、质量、效率上对程序设计的种种需求，而被
广泛推用，其方法本身也在这诸多的实践和磨练中日趋成熟、标准化和体系化，逐渐成为目前公认的主流程序设计方法。
开发程序离不开编程语言及编程方法即编程思想。流行的面向对象编程语言有C++、Java、C#等。编程思想中，又有面向对象和面向过程之分，它们既是世界观又是方法论。
在软件开发发的不断实践中，前者的优越性已经得到不断的体现和证实。
在面向对象程序设计中，有三个基本的原则思想，它们是封装、继承和多态性编程思想， 接下来将着重进行讨论。
一、对象与封装
用面向对象程序设计方法求解现实世界的问题，是将问题域分割成具有相互关联的多个对象，这些对象是现实世界中的可以被感知或触摸的事物在面向对象程序空间中的直
接映射。对象可以很简单，也可以很复杂，复杂的对象是由若干个简单的对象构成。对象具有两个共同的特点，一是都有自己的属性特征，二是都有自己的行为特征，例如，
一个圆有半径、圆心坐标位置等属性，还有可施加在其上的放大、缩小、移动、绘制等行为。
然而，在进行面向对象程序设计时，一一去描述同类对象既不可能也是极大的工作重复， 例如，为了设计一个学生成绩管理系统，在设计程序系统时不可能一一描述每个学
生对象。为了克服类似的复杂性，在程序设计时，采用了人们在处理复杂问题时常用的一种方法—抽象，它是将做什么和怎么做分开，从而隐藏了问题的复杂性。
在面向对象程序设计中，抽象是最基本的原则之一，包括数据抽象和行为抽象。数据抽象是抽象出某类对象的公共属性，行为抽象是抽象出某类对象的公共行为。这样，用
抽象的方法抓住了编程者所关心的重要信息，而忽略掉一些不重要的细节部分，从而找到了一类对象的抽象数据类型。然后，用面向对象编程工具的类机制把一类对象共有
属性的数据结构和操作该数据结构的行为捆绑在一起，封装在一个程序实体内定义成一种类类型，这一过程就是数据封装，简称封装。单从这点上来考虑，作者认为面向对
象程序设计也可称类程序设计。
类的使用者只需要知道怎么使用接口，而不需要知道操作是怎么实现的，因此，封装是对抽象的实现，封装的结果最终隐藏了问题的复杂性，并提供了代码的重用性，因为
类是允许重复生成同类对象的可重用的程序代码，而且还可以被继承，从而减轻了开发一个软件系统的难度和周期。
编程工具提供的类机制把对象的数据结构和使用数据结构的操作封装在一起，并且通常将数据结构部分声明为private访问属性而使其不能被外界直接访问，或者说对外界
隐 藏，而只能通过在这个数据结构上定义的public访问属性的操作接口间接地访问数据结构，使数据结构被隐藏在操作接口背后，操作的实现细节也一样被隐藏在操作接
口的背后；达到了封装数据结构的目的，这种编程思想使得类的使用者只需知道操作的接口， 而没有必要了解数据结构及在数据结构上的操作的实现细节，大大减轻了使
用者的负担。另外，当类的数据结构或操作的实现被修改时，只要操作的接口不变，使用类的程序的其余部分则不必修改，有利于程序的维护。
二、类与继承
继承也是面向对象程序设计的一个重要思想，对继承的更多的使用场合包含在多态性中， 这节只简要介绍继承思想。
现实生活中到处都有继承的例子， 如每个人都从自己父母身上继承了人种、外貌、性格和举止行为等特征，还会有不同的特征如年龄、姓名及学历等。类似地，在面向对
象程序设计中，继承表达的是一种类与类之间的被继承与继承的关系，是类与类之间的一种抽象与具体的关系，是对象与对象之间的一般与特殊的关系。这种关系使得一个
类可以继承另一个类的属性和操作，还可以有新的属性和操作，这就为面向对象程序设计的代码重用提供了很好的方法支持。在继承关系中，被继承的类称基类或父类，
由继承方式得到的类称派生类或子类，子类还可以被继承得到子类，如此下去，使得类与类间的继承关系形成多层次结构，从而能很好地刻划现实世界中存在的多层次关系，
如一个大学下面有各级学院，每个学院包括若干个专业系，一个系又是由几个教研室组成，每个教研室有若干个教师。在类层次结构中，上层类所具有的属性和方法全部被
下层类自动继承。因此，越在上层的类越具有普遍性和共性，越在下层的类越细化、具体化和专门化。
总的来说 继承具有如下特点：
（1）继承能方便地将现实世界中对象的一般与特殊的关系模型化成类层次结构。
（2）通过继承提高了代码的可重用性。这里的代码重用是指子类自动拥有父类的属性和方法。
（3）通过继承可以减少程序的冗余信息。因为利用继承使得父类中的属性和方法不必在派生类乃至间接派生类中重复定义。
（4）使用继承使得扩充程序时不必修改已有的代码，从而极大地减少了软件的维护工作量。
从上面的讨论可看出，面向对象程序设计的继承思想充分体现了抽象与具体、一般与特殊关系的自然现象。
三、公有继承与多态性
在面向对象程序设计中，多态性是指不同但相似的对象收到同一消息将导致完全不同的结果。它的主要内容是指子类型和公有继承。例如，整数类型中的子集构成了整数类
的一个子类型，整数类型的有关操作如加、减、乘、除、取余、比较等都可用于整数子集类型的对象上。从这个例子中可看出，每一个子类型的对象可以被用在高一级的类
型中， 即高一级类型中的所有操作可用于下一级类型的对象。
当类D公有直接或间接继承类B时，就称类D是类B的子类型。根据类型兼容规则，类D的任何对象Od就可以出现在基类B的对象Ob可出现的地方。这就意味着一个公共的消息集
既可以被送到类B的对象，也可以被送到类D的对象上，即用一组相同的方法和逻辑来使用这个类层次中不同类中的同名虚函数版本，或者说使用一段代码来处理一组相关的
对象，以达到代码重用的目的，这就是多态性的实质。
多态性为统一地处理一组接口相同但实现不同的操作提供了极好的方法支持，是一种形而上学的方法，它使程序逻辑简单明了、可读性强。此外，多态性还能使程序扩充特
别容易。
在使用多态性时关键要理解好最顶层类的设计和作用。它通过继承为下层的类提供了代码的共享，因而减少了重复性开发、提高了软件的开发效率。另一方面，通过多态性
统一了处理类层次结构中同名的虚函数，简化了处理这些同名虚函数的处理逻辑，同样也提高了软件的开发效率。正是因为这一点，即为了能统一地处理一个类层次结构中
同名的虚函数，在C++语言中，增加了如下两种语法机制，使程序员可以最大程度地使用多态性。
（1）空的虚函数
在很多应用中，类层次的顶层类并不具备下层类的一些功能。可在基类中设计一个什么也不做、空的虚函数。这样，就可通过顶层类提供统一处理该类层次的方法。一般地，
通过抽象，在顶层的基类中，总有很多这种空的虚函数，它为其子孙类用虚函数机制实现多态性提供了一个统一的界面。这是在多态性程序设计时经常用到的方法。
（2）纯的虚函数
在许多情况下，在基类中不能为虚函数给出一个有意义的实现，这时可以将它声明为纯虚函数。它的实现留给派生类来做。含纯虚函数的类在C++中叫抽象类，由于抽象类是
对事物的高度抽象，所以这样的类不能产生对象，尽管抽象类是用继承语法来表达的，但它的主要目的不是为代码共享而设计的，而是为了使用多态性而设计的，它是另一
个维度的抽象。
正是由于封装、继承和多态性编程思想，使面向对象的程序设计方法能自然、准确地模拟现实世界的问题，这种解决问题的新方法不仅能科学、自然地模拟现实世界的各种
复杂问题，而且编程者可以方便地共享已有的软件资源和程序代码，从而大幅度提高软件的开发效率和减少今后的软件维护工作量。
[1] Jeannette M. Wing. Computational Thinking[J]. Communications of the ACM, 2006
[2] 陈国良. 计算思维[J]. 中国计算机学会通讯，2012
[3] 李廉. 计算思维——概念与挑战[J]. 中国大学教学，2012 
[4] 张耀文. 基于计算思维的程序设计课程案例教学法研究[J]. 重庆电子工程职业学院学报，2012
[5] 吴绍兵. 计算思维和程序设计能力的培养[J]. 算机教育，2011
[6] 苏海英. 计算思维理论指导下的程序设计教学改革实践[J]. 现代计算机，2012
[7]杨芙清.面向对象的系统分析[M].北京：清华大学出版社，1998-05
[8]刘艺.Delphi面向对象编程思想[M].北京：机械工业出版社，2003.2
[9]Ian Graham.袁兆山译.面向对象方法原理与实践[M].北京：机械工业出版社，2003-01
[10]蓝雯飞.C++语言中的面向对象特征探讨[J].计算机工程与应用，2000
[11]蓝雯飞.C++面向对象程序设计中的多态性研究[J].计算机工程与应用，2000
[12]蓝雯飞.用C++中的子类型实现软件再用之探讨[J].计算机系统应用，1999
[13]蓝雯飞.面向对象程序设计语言C++中的多态性[J].微型机与应用，
[14]汪红兵、姚琳、武航星、张敏，2014
